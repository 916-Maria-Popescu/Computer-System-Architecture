     1                                  ;Se citeste de la tastatura un sir de numere in baza 10 fara semn. Sa se determine valoarea maxima din sir si sa se afiseze in fisierul max.txt ;(fisierul va fi creat) valoarea maxima, in baza 16
     2                                  
     3                                  
     4                                  
     5                                  bits 32
     6                                  global start
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import exit msvcrt.dll
    12                                  extern printf,scanf, fclose, fopen, exit
    13                                  
    14                                  ;extern max_value
    15                                  
    16                                  segment data use32 class=data
    17 00000000 7700000000000000            mod_access dd "w", 0
    18 00000008 486F77206D616E7920-         text_afisare dd "How many numbers do you want to add: ", 0
    18 00000011 6E756D626572732064-
    18 0000001A 6F20796F752077616E-
    18 00000023 7420746F206164643A-
    18 0000002C 2000000000000000   
    19 00000034 4E756D6265723A2000-         text_number dd "Number: ", 0
    19 0000003D 000000             
    20 00000040 2575000000000000            format_un_decimal dd "%u", 0
    21 00000048 00000000                    aux dd 0
    22 0000004C 00000000                    number dd 0
    23 00000050 00000000<rept>              sir times 10 dd 0
    24                                      
    25                                    
    26                                  segment code use32 class=code
    27                                  start:
    28                                      ; printf for "how many numbers do you want to add?"
    29 00000000 68[08000000]                push dword text_afisare
    30 00000005 FF15[00000000]              call [printf]
    31 0000000B 83C404                      add esp, 4*1
    32                                      
    33                                      ; scanf 
    34 0000000E 68[48000000]                push dword aux 
    35 00000013 68[40000000]                push dword format_un_decimal
    36 00000018 FF15[00000000]              call [scanf]
    37 0000001E 83C408                      add esp, 4*2 
    38                                      
    39 00000021 BF[50000000]                mov edi, sir
    40                                      add_number:
    41 00000026 833D[48000000]00                cmp dword[aux], 0
    42 0000002D 742F                            je final
    43                                  
    44                                          ;printf
    45 0000002F 68[34000000]                    push dword text_number
    46 00000034 FF15[00000000]                  call [printf]
    47 0000003A 83C404                          add esp, 4*1
    48                                          
    49                                          ;scanf
    50 0000003D 68[4C000000]                    push dword number
    51 00000042 68[40000000]                    push dword format_un_decimal
    52 00000047 FF15[00000000]                  call [scanf]
    53 0000004D 83C408                          add esp, 4*2
    54                                          
    55 00000050 A1[4C000000]                    mov eax, dword[number]
    56 00000055 AB                              stosd
    57 00000056 FF0D[48000000]                  dec dword[aux]
    58                                          
    59 0000005C EBC8                            jmp add_number
    60                                     
    61                                      final:
    62 0000005E 6A00                        push dword 0
    63 00000060 FF15[00000000]              call [exit]
    64                                      
    65                                      
    66                                      
    67                                  
    68                                  
    69                                  
