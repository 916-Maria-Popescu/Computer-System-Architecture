     1                                  ;Problema 18 lab 8
     2                                  ;Sa se citeasca de la tastatura un numar in baza 10 si un numar in baza 16. 
     3                                  ;Sa se afiseze in baza 10 numarul de biti 1 ai sumei celor doua numere citite. Exemplu:
     4                                  ;a = 32 = 0010 0000b
     5                                  ;b = 1Ah = 0001 1010b
     6                                  ;32 + 1Ah = 0011 1010b
     7                                  ;Se va afisa pe ecran valoarea 4.
     8                                  
     9                                  bits 32 ; assembling for the 32 bits architecture
    10                                  
    11                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    12                                  global start
    13                                  
    14                                  extern exit, printf, scanf             
    15                                  import exit msvcrt.dll    
    16                                  import printf msvcrt.dll    
    17                                  import scanf msvcrt.dll     
    18                                  
    19                                  segment data use32 class=data
    20 00000000 00000000                    a dd 0
    21 00000004 00000000                    b dd 0
    22 00000008 00000000                    sum dd 0
    23 0000000C 00000000                    result dd 0
    24 00000010 2564000000000000            format_decimal dd "%d", 0
    25 00000018 2578000000000000            format_hexadecimal dd "%x", 0
    26 00000020 612028646563696D61-         print_a db "a (decimal)=", 0
    26 00000029 6C293D00           
    27 0000002D 622028686578616465-         print_b db "b (hexadecimal)=", 0
    27 00000036 63696D616C293D00   
    28 0000003E 61203D202564286465-         format_a db "a = %d(decimal) = %d%d%d%d%d%d%d%d (binary)", 10, 13, 0
    28 00000047 63696D616C29203D20-
    28 00000050 256425642564256425-
    28 00000059 642564256425642028-
    28 00000062 62696E617279290A0D-
    28 0000006B 00                 
    29 0000006C 62203D202564286465-         format_b db "b = %d(decimal) = %d%d%d%d%d%d%d%d (binary)", 10, 13, 0
    29 00000075 63696D616C29203D20-
    29 0000007E 256425642564256425-
    29 00000087 642564256425642028-
    29 00000090 62696E617279290A0D-
    29 00000099 00                 
    30 0000009A 61202B2062203D2025-         print_sum db "a + b = %d + %d = %d = %d%d%d%d%d%d%d%d", 10, 13, 0
    30 000000A3 64202B202564203D20-
    30 000000AC 2564203D2025642564-
    30 000000B5 256425642564256425-
    30 000000BE 6425640A0D00       
    31 000000C4 546865726520617265-         print_result db "There are %d bits '1' in the sum", 0
    31 000000CD 202564206269747320-
    31 000000D6 27312720696E207468-
    31 000000DF 652073756D00       
    32 000000E5 00000000<rept>              binary_representation times 8 dd 0 
    33                                      
    34                                  
    35                                  ; our code starts here
    36                                  segment code use32 class=code
    37                                      start:
    38                                      
    39                                      ; printf (format, value1, value2,....) for a = 
    40 00000000 68[20000000]                push dword print_a
    41 00000005 FF15[00000000]              call [printf]
    42 0000000B 83C404                      add esp, 4
    43                                      
    44                                      ;scanf (format, variable-offset) for a
    45 0000000E 68[00000000]                push dword a
    46 00000013 68[10000000]                push dword format_decimal
    47 00000018 FF15[00000000]              call [scanf]
    48 0000001E 83C408                      add esp, 4*2
    49                                      
    50                                      ;printf for b = 
    51 00000021 68[2D000000]                push dword print_b
    52 00000026 FF15[00000000]              call [printf]
    53 0000002C 83C404                      add esp, 4
    54                                      
    55                                      ; scanf for b
    56 0000002F 68[04000000]                push dword b
    57 00000034 68[18000000]                push dword format_hexadecimal
    58 00000039 FF15[00000000]              call [scanf]
    59 0000003F 83C408                      add esp, 4*2
    60                                    
    61                                      ;---------------------binary for a
    62 00000042 BE[E5000000]                mov esi, binary_representation
    63 00000047 BB01000000                  mov ebx, 000000000000000000000000000000001b      ; 00000...00001 (32 digits)
    64 0000004C B920000000                  mov ecx, 32                                      ; prepare ecx for the loop, we have 32 digits in number a, so we'll check everyone of them
    65                                      
    66                                      myloop:
    67 00000051 A1[00000000]                    mov eax, dword[a]
    68 00000056 21D8                            and eax, ebx
    69 00000058 83F800                          cmp eax, 0 
    70 0000005B 7408                            je zero
    71                                          
    72                                          ; one
    73 0000005D C70601000000                    mov [esi], dword 1
    74 00000063 EB06                            jmp continue_loop
    75                                          
    76                                          zero:
    77 00000065 C70600000000                    mov [esi], dword 0
    78                                          
    79                                          continue_loop:
    80 0000006B 83C604                          add esi , 4
    81 0000006E D1E3                            shl ebx, 1
    82                                        
    83 00000070 E2DF                        loop myloop  
    84                                  
    85                                      ; printf "a = %d = %d"
    86 00000072 FF35[E5000000]              push dword [binary_representation]
    87 00000078 FF35[E9000000]              push dword [binary_representation+4]
    88 0000007E FF35[ED000000]              push dword [binary_representation+8]
    89 00000084 FF35[F1000000]              push dword [binary_representation+12]
    90 0000008A FF35[F5000000]              push dword [binary_representation+16]
    91 00000090 FF35[F9000000]              push dword [binary_representation+20]
    92 00000096 FF35[FD000000]              push dword [binary_representation+24]
    93 0000009C FF35[01010000]              push dword [binary_representation+28]
    94 000000A2 FF35[00000000]              push dword [a]
    95 000000A8 68[3E000000]                push dword format_a
    96 000000AD FF15[00000000]              call [printf]
    97 000000B3 83C428                      add esp, 4 * 10
    98                                      
    99                                      
   100                                      
   101                                      ;---------------------------------------binary for b
   102 000000B6 BE[E5000000]                mov esi, binary_representation
   103 000000BB BB01000000                  mov ebx, 000000000000000000000000000000001b      ; 00000...00001 (32 digits)
   104 000000C0 B920000000                  mov ecx, 32                                      ; prepare ecx for the loop, we have 32 digits in number a, so we'll check everyone of them
   105                                      
   106                                      myloop2:
   107 000000C5 A1[04000000]                    mov eax, dword[b]
   108 000000CA 21D8                            and eax, ebx
   109 000000CC 83F800                          cmp eax, 0 
   110 000000CF 7408                            je zero2
   111                                          
   112                                          ; one
   113 000000D1 C70601000000                    mov [esi], dword 1
   114 000000D7 EB06                            jmp continue_loop2
   115                                          
   116                                          zero2:
   117 000000D9 C70600000000                    mov [esi], dword 0
   118                                          
   119                                          continue_loop2:
   120 000000DF 83C604                          add esi , 4
   121 000000E2 D1E3                            shl ebx, 1
   122                                        
   123 000000E4 E2DF                        loop myloop2  
   124                                  
   125                                      ; printf "b = %d = %d"
   126 000000E6 FF35[E5000000]              push dword [binary_representation]
   127 000000EC FF35[E9000000]              push dword [binary_representation+4]
   128 000000F2 FF35[ED000000]              push dword [binary_representation+8]
   129 000000F8 FF35[F1000000]              push dword [binary_representation+12]
   130 000000FE FF35[F5000000]              push dword [binary_representation+16]
   131 00000104 FF35[F9000000]              push dword [binary_representation+20]
   132 0000010A FF35[FD000000]              push dword [binary_representation+24]
   133 00000110 FF35[01010000]              push dword [binary_representation+28]
   134 00000116 FF35[04000000]              push dword [b]
   135 0000011C 68[6C000000]                push dword format_b
   136 00000121 FF15[00000000]              call [printf]
   137 00000127 83C428                      add esp, 4 * 10
   138                                      
   139                                      
   140                                      ; ------------------------------------------------------------- compute the sum and print the binary representation
   141 0000012A A1[00000000]                mov eax, dword[a]     ; eax = a
   142 0000012F 0305[04000000]              add eax, dword[b]     ; eax = a+b 
   143 00000135 A3[08000000]                mov dword [sum], eax ; sum = a+b 
   144                                  
   145                                          
   146 0000013A BE[E5000000]                mov esi, binary_representation
   147 0000013F BB01000000                  mov ebx, 000000000000000000000000000000001b      ; 00000...00001 (32 digits)
   148 00000144 B920000000                  mov ecx, 32                                      ; prepare ecx for the loop, we have 32 digits in number a, so we'll check everyone of them
   149                                   
   150                                      myloop3:
   151 00000149 A1[08000000]                    mov eax, dword[sum]
   152 0000014E 21D8                            and eax, ebx
   153 00000150 83F800                          cmp eax, 0 
   154 00000153 740E                            je zero3
   155                                          
   156                                          ; one
   157 00000155 C70601000000                    mov [esi], dword 1
   158 0000015B FF05[0C000000]                  inc dword[result]
   159 00000161 EB06                            jmp continue_loop3
   160                                          
   161                                          zero3:
   162 00000163 C70600000000                    mov [esi], dword 0
   163                                          
   164                                          continue_loop3:
   165 00000169 83C604                          add esi , 4
   166 0000016C D1E3                            shl ebx, 1
   167                                        
   168 0000016E E2D9                        loop myloop3  
   169                                  
   170                                      ; " a + b = %d +%d = %d = %d%d%d%d%d%d%d%d"
   171 00000170 FF35[E5000000]              push dword [binary_representation]
   172 00000176 FF35[E9000000]              push dword [binary_representation+4]
   173 0000017C FF35[ED000000]              push dword [binary_representation+8]
   174 00000182 FF35[F1000000]              push dword [binary_representation+12]
   175 00000188 FF35[F5000000]              push dword [binary_representation+16]
   176 0000018E FF35[F9000000]              push dword [binary_representation+20]
   177 00000194 FF35[FD000000]              push dword [binary_representation+24]
   178 0000019A FF35[01010000]              push dword [binary_representation+28]
   179 000001A0 FF35[08000000]              push dword [sum]
   180 000001A6 FF35[04000000]              push dword [b]
   181 000001AC FF35[00000000]              push dword [a]
   182 000001B2 68[9A000000]                push dword print_sum
   183 000001B7 FF15[00000000]              call [printf]
   184 000001BD 83C430                      add esp, 4 * 12
   185                                      
   186                                      ; print the result "There are %d one bits in the sum"
   187 000001C0 FF35[0C000000]              push dword [result]
   188 000001C6 68[C4000000]                push dword print_result
   189 000001CB FF15[00000000]              call [printf]
   190 000001D1 83C408                      add esp, 4*2
   191                                      
   192                                      
   193 000001D4 6A00                        push dword 0
   194 000001D6 FF15[00000000]              call [exit]
   195                                      
   196                                    
   197                                  
   198                                    
