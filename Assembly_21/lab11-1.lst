     1                                  ;Se da un sir de numere. Sa se afiseze valorile in baza 16 si in baza 2.
     2                                  bits 32
     3                                  global start
     4                                  import printf msvcrt.dll
     5                                  import exit msvcrt.dll
     6                                  extern printf, exit
     7                                  extern binary_base
     8                                  
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10                                  
    11 00000000 0519377A22                   s db 5,25,55,122,34
    12                                       len equ $-s
    13                                       ;dhex times len db 0
    14                                       ;dbin times len db 0
    15 00000005 25782C2000                   format_hex db '%x, ', 0
    16 0000000A 25732C2000                   format_bin db '%s, ', 0
    17 0000000F 202020202020202042-          format_initial_bin db '        Binary: ', 0
    17 00000018 696E6172793A2000   
    18 00000020 48657861646563696D-          format_initial_hexa db 'Hexadecimal: ', 0
    18 00000029 616C3A2000         
    19                                      
    20                                  segment  code use32 class=code ; code segment
    21                                      start:
    22                                       
    23 00000000 68[20000000]                    push dword format_initial_hexa
    24 00000005 FF15[00000000]                  call [printf]
    25 0000000B 83C404                          add esp, 4 
    26                                      ;---------------------------------------------------------------------------------Hexadecimal
    27                                  
    28 0000000E BE[00000000]                    mov esi, s   
    29 00000013 B905000000                      mov ecx, len ; we store the value of the lenght of the string in ecx
    30                                  
    31 00000018 FC                              cld          ; clear direction flag, so DF = 0
    32                                      
    33                                          ; the loop for the hexadecimal string
    34                                          .hexadecimal_loop:
    35                                      
    36 00000019 B800000000                          mov eax, 0                  ; clear eax
    37 0000001E AC                                  lodsb                       ; The byte from the address <DS:ESI> is loaded in AL
    38 0000001F 89CB                                mov ebx, ecx                ; save ecx
    39                                          
    40 00000021 50                                  push eax
    41 00000022 68[05000000]                        push dword format_hex
    42 00000027 FF15[00000000]                      call [printf]
    43 0000002D 83C408                              add esp, 4 * 2
    44                                              
    45 00000030 89D9                                mov ecx, ebx 
    46 00000032 E2E5                            loop .hexadecimal_loop    
    47                                          
    48                                      ;-----------------------------------------------------------------------------------Binary
    49 00000034 68[0F000000]                    push dword format_initial_bin
    50 00000039 FF15[00000000]                  call [printf]
    51 0000003F 83C404                          add esp, 4 
    52                                          
    53 00000042 B905000000                      mov ecx, len ; we store the value of the lenght of the string in ecx
    54 00000047 BE[00000000]                    mov esi, s   
    55 0000004C FC                              cld          ; clear direction flag, so DF = 0
    56                                          
    57                                          ; the loop for the binary string
    58                                          .binary_loop:
    59                                          
    60 0000004D B800000000                          mov eax,0
    61 00000052 AC                                  lodsb                   ; load in al the byte stored at the offset indicated by esi
    62                                              
    63 00000053 50                                  push eax                ; push the parameter on the stack for the function
    64 00000054 E8(00000000)                        call binary_base        ; call the function that returns the number into its binary form
    65                                                                      ; the function saves the result in eax
    66                                              
    67 00000059 89CB                                mov ebx, ecx
    68                                              
    69 0000005B 50                                  push eax
    70 0000005C 68[0A000000]                        push dword format_bin
    71 00000061 FF15[00000000]                      call [printf]
    72 00000067 83C408                              add esp, 4 * 2          
    73                                             
    74 0000006A 89D9                                mov ecx, ebx            ;move back the initial value of ecx 
    75                                          
    76 0000006C E2DF                            loop .binary_loop       ; loop until ecx = 0
    77                                  
    78                                          
    79                                          ; exit(0)
    80 0000006E 6A00                            push    dword 0      
    81 00000070 FF15[00000000]                  call    [exit]       
    82                                          
    83                                          
    84                                          
    85                                          
    86                                          
    87                                          
    88                                      
